//
// Generated file, do not edit! Created by nedtool 5.4 from common.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __COMMON_M_H
#define __COMMON_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>common.msg:19</tt> by nedtool.
 * <pre>
 * //
 * // ADV message
 * //
 * message mAdvertisement
 * {
 *     unsigned int id; // CH id
 * }
 * </pre>
 */
class mAdvertisement : public ::omnetpp::cMessage
{
  protected:
    unsigned int id;

  private:
    void copy(const mAdvertisement& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const mAdvertisement&);

  public:
    mAdvertisement(const char *name=nullptr, short kind=0);
    mAdvertisement(const mAdvertisement& other);
    virtual ~mAdvertisement();
    mAdvertisement& operator=(const mAdvertisement& other);
    virtual mAdvertisement *dup() const override {return new mAdvertisement(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned int getId() const;
    virtual void setId(unsigned int id);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const mAdvertisement& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, mAdvertisement& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>common.msg:23</tt> by nedtool.
 * <pre>
 * // DATA message
 * message mData
 * {
 *     int id;	// sender id
 *     int round; // round number
 * }
 * </pre>
 */
class mData : public ::omnetpp::cMessage
{
  protected:
    int id;
    int round;

  private:
    void copy(const mData& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const mData&);

  public:
    mData(const char *name=nullptr, short kind=0);
    mData(const mData& other);
    virtual ~mData();
    mData& operator=(const mData& other);
    virtual mData *dup() const override {return new mData(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getId() const;
    virtual void setId(int id);
    virtual int getRound() const;
    virtual void setRound(int round);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const mData& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, mData& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>common.msg:28</tt> by nedtool.
 * <pre>
 * // JOIN message
 * message mJoin
 * {
 *     int id;
 *     //string anotherField;
 *     //double arrayField1[];
 *     //double arrayField2[10];
 * }
 * </pre>
 */
class mJoin : public ::omnetpp::cMessage
{
  protected:
    int id;

  private:
    void copy(const mJoin& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const mJoin&);

  public:
    mJoin(const char *name=nullptr, short kind=0);
    mJoin(const mJoin& other);
    virtual ~mJoin();
    mJoin& operator=(const mJoin& other);
    virtual mJoin *dup() const override {return new mJoin(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getId() const;
    virtual void setId(int id);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const mJoin& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, mJoin& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>common.msg:35</tt> by nedtool.
 * <pre>
 * // SCHED message
 * message mSchedule
 * {
 *     int turn; // TDMA turn
 *     double duration; // TDMA slot duration
 *     int round; // round number
 *     int CHId; // CH id
 * }
 * </pre>
 */
class mSchedule : public ::omnetpp::cMessage
{
  protected:
    int turn;
    double duration;
    int round;
    int CHId;

  private:
    void copy(const mSchedule& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const mSchedule&);

  public:
    mSchedule(const char *name=nullptr, short kind=0);
    mSchedule(const mSchedule& other);
    virtual ~mSchedule();
    mSchedule& operator=(const mSchedule& other);
    virtual mSchedule *dup() const override {return new mSchedule(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getTurn() const;
    virtual void setTurn(int turn);
    virtual double getDuration() const;
    virtual void setDuration(double duration);
    virtual int getRound() const;
    virtual void setRound(int round);
    virtual int getCHId() const;
    virtual void setCHId(int CHId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const mSchedule& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, mSchedule& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>common.msg:43</tt> by nedtool.
 * <pre>
 * // ALTERNATIVE CH SELCTION
 * message mCenterCH
 * {
 *     int clusterN; // num. of sensors in cluster
 *     double IDLETime; // TDMA slot duration
 *     double SCHEDDelay;
 * }
 * </pre>
 */
class mCenterCH : public ::omnetpp::cMessage
{
  protected:
    int clusterN;
    double IDLETime;
    double SCHEDDelay;

  private:
    void copy(const mCenterCH& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const mCenterCH&);

  public:
    mCenterCH(const char *name=nullptr, short kind=0);
    mCenterCH(const mCenterCH& other);
    virtual ~mCenterCH();
    mCenterCH& operator=(const mCenterCH& other);
    virtual mCenterCH *dup() const override {return new mCenterCH(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getClusterN() const;
    virtual void setClusterN(int clusterN);
    virtual double getIDLETime() const;
    virtual void setIDLETime(double IDLETime);
    virtual double getSCHEDDelay() const;
    virtual void setSCHEDDelay(double SCHEDDelay);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const mCenterCH& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, mCenterCH& obj) {obj.parsimUnpack(b);}


#endif // ifndef __COMMON_M_H

